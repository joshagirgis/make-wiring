#include <Arduino.h>
#include <Wire.h>
#include <TinyGPSplusplus.h>  //gps lib
#include <ReceiveOnlySoftwareSerial.h>
#include <INA219.h>
#include <EEPROM.h> 
#include <CN0349.h>
//#include <NLSWDK.h>
#include <SHT20.h>
#include <avr/io.h> 
#include <avr/sleep.h>
#include <avr/wdt.h>
#include <avr/power.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdlib.h>
#define SW_Serial Serial1  
ReceiveOnlySoftwareSerial gpsSer(6); 	// RX PB2 converts to pin6 in for atmega644pa Arduino variant
TinyGPSPlus gps; 						//intialize GPS
SHT20 TH;
INA219 CV;


void modemSetup() {    //setup modem power wise and software wise
  String modemResponse = ""; // Modem responce to a command
  // initialize serial debug communication with PC over USB connection
  Debug.begin(115200);
  while (!Debug) ; // wait for serial debug port to connect to PC
  for (int q = 5; q > 0; q--) {
    Debug.println(q, DEC);
    delay(250);
  } 
  Debug.println("Socket Dial To Send data to Exosite");
  // Start cellular modem
  Debug.println("Starting Cellular Modem");
  //Turn off internal PU resistor Arduino I/O pin 12 is connected to modem ON_OFF signal.
  digitalWrite(10, LOW); //ON_OFF has internal 200k pullup resistor and needs to be driven low for >1s, don't accept default

  // Configure I/O pin 12 as output
  pinMode(10, OUTPUT);
  pinMode(10, OUTPUT);  // SW_DTR pin (must be driven low if unused)
  pinMode(10, OUTPUT);  // SW_RTS pin (must be driven low if unused)
  digitalWrite(10, LOW);
  digitalWrite(10, LOW);
  digitalWrite(10, SW_ON);  // Turn on Skywire modem
  delay(1100); // modem requires >1s pulse
  pinMode(10, INPUT);  // Return I/O pin 12 to input/hi-Z state
  delay(30100); // Wait > 30 seconds for initialization

  // Initialize serial port to communicate with modem
  Debug.println("Initializing modem COM port");
  SW_Serial.begin(115200);
  while (!SW_Serial) ;  // send "AT" command to confirm modem is turned on
  Debug.println("Test AT command");
  WaitForResponse("AT\r", "OK", 100, modemResponse);
  // turn on echo for Cat 1 modem
  WaitForResponse("ATE1\r", "OK", 500, modemResponse);
  Debug.println("Reseting modem");
  WaitForResponse("AT+SOFTRESET\r", "OK", 500, modemResponse);  // Soft reset of modem
  WaitForResponse("AT+CEREG=0\r", "OK", 500, modemResponse);  // turn off URC (unsolicited result code) messages for Cat 1 modem
  WaitForResponse("AT+CMEE=2\r", "OK", 1000, modemResponse);  // turn on verbose error messages
// Setup PDP context
  Debug.println("Setting up PDP context");
  SendModemCommand("AT^SISC=0\r", "OK", 500, modemResponse);
  WaitForResponse("AT^SISS=0,\"srvType\",\"Socket\"\r", "OK", 500, modemResponse);
  WaitForResponse("AT^SISS=0,\"conId\",3\r", "OK", 500, modemResponse); // Set to use PDP context 3
  WaitForResponse("AT^SISS=0,\"address\",\"socktcp://m2.exosite.com:80\"\r", "OK", 500, modemResponse); // Configure socket to use TCP on port 80
  delay(10000);
  WaitForResponse("AT+CSQ\r", "OK", 500, modemResponse);  // Check signal strength
  WaitForResponse("AT+CGMR\r", "OK", 500, modemResponse);  // send command to modem to get firmware version
  String modemResp = "";  // activate PDP context
  delay(2000);
}



int main(){
	init();
	Wire.begin();
	Serial.begin(115200);
	Serial.println("Begin!";
	
	DDRD |= 1 << PIND4;  								//LED ->set Port D -> PD4 to OUTPUT without changing current settings
	PORTD |= 1 << PIND4; 								//FLIP onboard LED ON

	//DDRD |= 1 << PIND6;  								//set Port D -> PD6 to OUTPUT without changing current settings
	//PORTD |= 1 << PIND6; 								//SET PD6 to HIGH -> turns ON onboard 4 Volt and 3.3v volt Regulators

	
pinMode(23, OUTPUT);

  digitalWrite(23, LOW);
  delay(1100); // modem requires >1s pulse
  pinMode(23, INPUT);  // Return I/O pin 12 to input/hi-Z state
	
	/*gpsSer.begin(9600);
	CV.begin(0x41);										// Default INA219 address is 0x40 JP2 bridged = 0x41
	CV.configure(INA219_RANGE_32V, INA219_GAIN_320MV, INA219_BUS_RES_12BIT, INA219_SHUNT_RES_12BIT_1S);
	CV.calibrate(0.1, 2);								// Calibrate INA219. Rshunt = 0.1 ohm, Max excepted current = 2A
	//*/
	
	String modemResponse = ""; // Modem responce to a command
	modemSetup();
	
	while (1){
		delay(200);
		Serial.println(getExoData("freqe", "0a2a70e7069f0481fb23bc3a72ba5c9a5edad4a3");
		
		delay(8000);
		
	
	/*	float temp = TH.readTemperature(); 				//Read Temperature
		float humid = TH.readHumidity();   				//Read Humiditiy
		Serial.print("Board Temperature:   ";				//Print Power stats
		Serial.println(temp, 1); 
		Serial.print("Humidity:   ";				//Print Power stats
		Serial.println(humid, 1);  						//Print Temperature and Humidity
		Serial.println(gpsSensor());					//Print GPS location
		Serial.print("Source voltage:   ";				//Print Power stats
		Serial.print(CV.readBusVoltage(), 5);
		Serial.println(" V";	

		Serial.print("Power Consumption:     ";
		Serial.print(CV.readBusPower(), 5);
		Serial.println(" W";

		Serial.print("Curent Draw: ";
		Serial.print(CV.readShuntCurrent(), 5);
		Serial.println(" A";
		delay(1000);
		
		//Serial.println(analogRead(A1)*5.0/1023);*/
	}
   return(0);

}
